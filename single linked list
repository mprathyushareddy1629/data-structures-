#include<stdio.h>
#include<stdlib.h>
void create();
void display();
void insert_begin();
void insert_end();
void insert_pos();
void delete_begin();
void delete_end();
void delete_pos();

struct node
 {
   int data;
   struct node *next;
  };
struct node *first=NULL;
int main()
{
   int choice;
   while(1){
   printf("\nSINGLE LINKED LIST OPERATIONS \n"); 
   printf("menu\n");
   printf("\n1.create");
   printf("\n2.display");
   printf("\n3.insert at the begining");
   printf("\n4.insert at the end");
   printf("\n5.insert at a specified position");
   printf("\n6.delete from begining");
   printf("\n7.delete from end");
   printf("\n8.delete from specified position");
   printf("\n9.exit");
   printf("\n\n enter your choice:");
   scanf("%d",&choice);
   switch(choice)
    {
	case 1:
		create();
		break;
	case 2: 
		display();
		break;
	case 3:
		insert_begin();
		break;
	case 4:
		insert_end();
		break;
	case 5:
		insert_pos();
		break;
	case 6:
		delete_begin();
		break;
	case 7:
		delete_end();
		break;
	case 8:
		delete_pos();
		break;
	case 9:
		exit(0);
		break;
	default:
		printf("\nwrong choice\n");
    }
	}	
 return 0;
}
void create()
 {
   struct node *temp,*ptr;
   temp=(struct node *)malloc(sizeof(struct node));
   if(temp==NULL)
     {
       printf("\n out of memory space:\n");
	exit(0);
      }
   printf("\n enter the data value for the node :\n");
   scanf("%d",&temp->data);
   temp->next=NULL;
   if(first==NULL)
    {
      first=temp;
     }
   else 
    { 
      ptr=first;
      while(ptr->next!=NULL)
        {
	  ptr=ptr->next;
         }
      ptr->next=temp;
     }
  }
void display()
{
  struct node *ptr;
  if(first==NULL)
     {
	printf("\nlist is empty:\n");	
        return;
     }
  else
    {
      ptr=first;
      printf("\n the list elements are :\n");
      while(ptr!=NULL)
          {
            printf("%d\t",ptr->data);
            ptr=ptr->next;
          }
    }
}
void insert_begin()
{
  struct node *temp;
  temp=(struct node*)malloc(sizeof(struct node));
  if(temp==NULL)
  {
    printf("\n out of memory\n");
  }
  printf("\n enter the data value for the node");
  scanf("%d",&temp->data);
  temp->next=NULL;
  if(first==NULL)
   {
    first=temp;
    return;
   } 
  else
   {
     temp->next=first;
     first=temp;
   }
}
void insert_end()
{
   struct node *temp,*ptr;
   temp=(struct node*)malloc(sizeof(struct node));
   if(temp==NULL)
    {
    printf("\n out of memory\n");
    }
  printf("\n enter the data value for the node");
  scanf("%d",&temp->data);
  temp->next=NULL;
  if(first==NULL)
   {
    first=temp;
    return;
   } 
  else
   {
     ptr=first;
     while(ptr->next!=NULL)
       {
         ptr=ptr->next;
       }
       ptr->next=temp;
    }
}
void insert_pos()
{
  struct node *temp,*ptr;
  int i,pos;
  temp=(struct node*)malloc(sizeof(struct node));
  if(temp==NULL)
    {
    printf("\n out of memory\n");
    return;
    }
  printf("enter the position for the new node to be inserted :\n");
  scanf("%d",&pos);
  printf("\n enter the value of the node");
  scanf("%d",&temp->data);
  temp->next=NULL;
  if(pos==0)
   {
     temp->next=first;
     first=temp;
   }
  else
   {
     for(i=1,ptr=first;i<pos-1;i++)
      {
	ptr=ptr->next;
	if(ptr==NULL)
	  { printf("\n position not found:");
            return;
	  }  
       }
     temp->next=ptr->next;
     ptr->next=temp;
    }
}
void delete_begin()
 {
    struct node *ptr;
  if(ptr==NULL)
     {
	printf("\nlist is empty:\n");	
        return;
     }
  else
    {
      ptr=first;
      first=first->next;
      printf("\n the deleted element is :%d\t",ptr->data);
      free(ptr);
    }
}
void delete_end()
  {
    struct node *temp,*ptr;
    if(first==NULL)
    {
     printf("\n the list is empty");
     exit(0);
    }
    else if(first->next==NULL)
     {
      ptr=first;
      ptr=NULL;
      printf("the deleted element is :%d\t",ptr->data);
      free(ptr);
      }
     else
	{
	  ptr=first;
          while(ptr->next!=NULL)
           {
	     temp=ptr;
	     ptr=ptr->next;  
           }
          temp->next=NULL; 
          printf("\n the deleted element is :%d\t",ptr->data);
	  free(ptr);
         }
 }
void delete_pos()
 {
   int i,pos;
   struct node *temp,*ptr;
    if(first==NULL)
    {
     printf("\n the list is empty");
     exit(0);
    }
  else 
   {
     printf("\n enetr the postion of the node to be deleted \n");
     scanf("%d",&pos);
     if(pos==0)
      {
	ptr=first;
	first=first->next;
	printf("\n the deleted element is :%d\t",ptr->data);
	free(ptr);
      }
     else
       {
	ptr=first;
	for(i=0;i<pos;i++)
	 {
	   temp=ptr;
	   ptr=ptr->next;
	   if(ptr==NULL)
	    {
		printf("\n position not found");
        return;
	    }
         }
        temp->next=ptr->next;

	printf("\n the deleted element is:%d\t",ptr->data);
        free(ptr);
      }
   }
}

   
